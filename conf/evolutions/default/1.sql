# --- !Ups

create table "people" (
  "id" bigint generated by default as identity(start with 1) not null primary key,
  "name" varchar not null,
  "age" int not null
);

CREATE TABLE "users" (
"user_id" bigint generated by default as identity(start with 1) not null primary key,
"user_name" varchar not null);

CREATE TABLE "yt_users" (
  "user_channel_id" varchar(24) not null primary key,
  "user_id" bigint not null,
  "display_name" VARCHAR,
  "email" VARCHAR,
  "profile_image_url" VARCHAR,
  "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "activated" BOOLEAN DEFAULT FALSE,
  CONSTRAINT fk_yt_users_with_users
          FOREIGN KEY ("user_id")
              REFERENCES "users" ("user_id")
);

CREATE TABLE "yt_streamer" (
    "channel_id" varchar(24) NOT NULL PRIMARY KEY,
    "onwer_user_id" bigint not null,
    "current_balance_number" bigint NOT NULL,
    CONSTRAINT fk_yt_streamer_with_users
              FOREIGN KEY ("onwer_user_id")
                  REFERENCES "users" ("user_id")
);

CREATE TABLE "user_streamer_state"(
    "user_id" bigint not null,
    "streamer_channel_id" varchar(24) NOT NULL,
    "current_balance_number" bigint NOT NULL,
     CONSTRAINT fk_user_streamer_state_with_users
                   FOREIGN KEY ("user_id")
                       REFERENCES "users" ("user_id"),
   CONSTRAINT fk_user_streamer_state_with_streamer
                      FOREIGN KEY ("streamer_channel_id")
                          REFERENCES "yt_streamer" ("channel_id")
);

-- Create table for OAuth2 tokens
CREATE TABLE "oauth2_tokens" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
  "user_channel_id" VARCHAR(24) NOT NULL,
  "access_token" VARCHAR NOT NULL,
  "token_type" VARCHAR,
  "expires_in" INTEGER,
  "refresh_token" VARCHAR,
  "created_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT "fk_oauth2_tokens_yt_users" FOREIGN KEY ("user_channel_id") REFERENCES "yt_users" ("user_channel_id") ON DELETE CASCADE
);

-- Create index for faster token lookups
CREATE INDEX "idx_oauth2_tokens_user_channel_id" ON "oauth2_tokens" ("user_channel_id");

-- Create table for Silhouette login info mapping
CREATE TABLE "login_info" (
  "id" BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY,
  "provider_id" VARCHAR NOT NULL,
  "provider_key" VARCHAR NOT NULL,
  "user_id" BIGINT NOT NULL,
  CONSTRAINT "fk_login_info_users" FOREIGN KEY ("user_id") REFERENCES "users" ("user_id") ON DELETE CASCADE,
  CONSTRAINT "unique_login_info" UNIQUE ("provider_id", "provider_key")
);

-- Create index for faster login lookups
CREATE INDEX "idx_login_info_provider_key" ON "login_info" ("provider_id", "provider_key");
CREATE INDEX "idx_login_info_user_id" ON "login_info" ("user_id");

# --- !Downs
drop table "oauth2_tokens" if exists;
drop table "login_info" if exists;
drop table "user_streamer_state" if exists;
drop table "yt_streamer" if exists;
drop table "yt_users" if exists;
drop table "users" if exists;
drop table "people" if exists;